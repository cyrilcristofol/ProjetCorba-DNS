package ProjetCorbaDNS.Registrar;


/**
* ProjetCorbaDNS/Registrar/_RegistrarForProprietaireStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from c:/Users/Manavai/workspace/ProjetCorba-DNS/GestionNomsDomaine.idl
* vendredi 16 dÈcembre 2016 18 h 25 CET
*/

public class _RegistrarForProprietaireStub extends org.omg.CORBA.portable.ObjectImpl implements ProjetCorbaDNS.Registrar.RegistrarForProprietaire
{


  // Configurer les param√®tres d'un nom de domaine
  public boolean AddParameter (String ParameterType, String DomainName, String ParameterValue)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("AddParameter", true);
                ProjetCorbaDNS.ParameterTypeHelper.write ($out, ParameterType);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                ProjetCorbaDNS.ParameterValueHelper.write ($out, ParameterValue);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return AddParameter (ParameterType, DomainName, ParameterValue        );
            } finally {
                _releaseReply ($in);
            }
  } // AddParameter

  public boolean ModifyParameter (String DomainName, String ParameterType, String ParameterValue)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ModifyParameter", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                ProjetCorbaDNS.ParameterTypeHelper.write ($out, ParameterType);
                ProjetCorbaDNS.ParameterValueHelper.write ($out, ParameterValue);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ModifyParameter (DomainName, ParameterType, ParameterValue        );
            } finally {
                _releaseReply ($in);
            }
  } // ModifyParameter

  public ProjetCorbaDNS.DomainNameParameters GetDomainParameters (String DomainName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("GetDomainParameters", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                $in = _invoke ($out);
                ProjetCorbaDNS.DomainNameParameters $result = ProjetCorbaDNS.DomainNameParametersHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return GetDomainParameters (DomainName        );
            } finally {
                _releaseReply ($in);
            }
  } // GetDomainParameters


  // transferer un nom de domaine vers un nouveau propri√©taire
  public boolean DomainNameRenewRequest (String DomainNameToRenew)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DomainNameRenewRequest", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainNameToRenew);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DomainNameRenewRequest (DomainNameToRenew        );
            } finally {
                _releaseReply ($in);
            }
  } // DomainNameRenewRequest

  public boolean renewDomain (String DomainName, ProjetCorbaDNS.UserInformations UserInformations)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("renewDomain", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                ProjetCorbaDNS.UserInformationsHelper.write ($out, UserInformations);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return renewDomain (DomainName, UserInformations        );
            } finally {
                _releaseReply ($in);
            }
  } // renewDomain

  public boolean ChangeOwnerRequest (String DomainName, ProjetCorbaDNS.UserInformations NewOwner)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ChangeOwnerRequest", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                ProjetCorbaDNS.UserInformationsHelper.write ($out, NewOwner);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ChangeOwnerRequest (DomainName, NewOwner        );
            } finally {
                _releaseReply ($in);
            }
  } // ChangeOwnerRequest


  // changer de registrar
  public ProjetCorbaDNS.UserInformations changeRegistrarRequest (ProjetCorbaDNS.DomainNameInformations DomainNameInformations, ProjetCorbaDNS.UserInformations UserInformations)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarRequest", true);
                ProjetCorbaDNS.DomainNameInformationsHelper.write ($out, DomainNameInformations);
                ProjetCorbaDNS.UserInformationsHelper.write ($out, UserInformations);
                $in = _invoke ($out);
                ProjetCorbaDNS.UserInformations $result = ProjetCorbaDNS.UserInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarRequest (DomainNameInformations, UserInformations        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarRequest

  public String changeRegistrarTransactionRequest (ProjetCorbaDNS.DomainNameInformations DomainNameInformations)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarTransactionRequest", true);
                ProjetCorbaDNS.DomainNameInformationsHelper.write ($out, DomainNameInformations);
                $in = _invoke ($out);
                String $result = ProjetCorbaDNS.DNTransactionIDHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarTransactionRequest (DomainNameInformations        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarTransactionRequest

  public boolean changeRegistrarTransactionBegin (String DNTransactionID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarTransactionBegin", true);
                ProjetCorbaDNS.DNTransactionIDHelper.write ($out, DNTransactionID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarTransactionBegin (DNTransactionID        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarTransactionBegin

  public boolean changeRegistrarTransactionCommit (String DNTransactionID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarTransactionCommit", true);
                ProjetCorbaDNS.DNTransactionIDHelper.write ($out, DNTransactionID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarTransactionCommit (DNTransactionID        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarTransactionCommit

  public boolean changeRegistrarTransactionRollback (String DNTransactionID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarTransactionRollback", true);
                ProjetCorbaDNS.DNTransactionIDHelper.write ($out, DNTransactionID);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarTransactionRollback (DNTransactionID        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarTransactionRollback

  public ProjetCorbaDNS.UserInformations changeRegistrarValidateTransaction (String DNTransactionID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("changeRegistrarValidateTransaction", true);
                ProjetCorbaDNS.DNTransactionIDHelper.write ($out, DNTransactionID);
                $in = _invoke ($out);
                ProjetCorbaDNS.UserInformations $result = ProjetCorbaDNS.UserInformationsHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return changeRegistrarValidateTransaction (DNTransactionID        );
            } finally {
                _releaseReply ($in);
            }
  } // changeRegistrarValidateTransaction

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ProjetCorbaDNS/Registrar/RegistrarForProprietaire:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RegistrarForProprietaireStub
