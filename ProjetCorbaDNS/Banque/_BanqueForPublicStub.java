package ProjetCorbaDNS.Banque;


/**
* ProjetCorbaDNS/Banque/_BanqueForPublicStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from c:/Users/Manavai/workspace/ProjetCorba-DNS/GestionNomsDomaine.idl
* vendredi 16 dÈcembre 2016 18 h 25 CET
*/


/* Interface utilis√© par les registrar pour demander un transfert d'argent
		lors d'un location, d'un renouvellement de domaine, ou bien d'un changement
		de Registrar par un propri√©taire d'un DN. 
		
		*/
public class _BanqueForPublicStub extends org.omg.CORBA.portable.ObjectImpl implements ProjetCorbaDNS.Banque.BanqueForPublic
{


  // m√©thode permettant d'ordonner un Transfert d'argent
  public String TransferMoney (String TransfertFromRIB, String TransfertToRIB, int SUM)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("TransferMoney", true);
                $out.write_string (TransfertFromRIB);
                $out.write_string (TransfertToRIB);
                $out.write_long (SUM);
                $in = _invoke ($out);
                String $result = ProjetCorbaDNS.TransfertIDHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return TransferMoney (TransfertFromRIB, TransfertToRIB, SUM        );
            } finally {
                _releaseReply ($in);
            }
  } // TransferMoney


  // m√©thode permettant de v√©rifier le status d'un transfert
  public String CheckTransfertStatus (String transfertID)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("CheckTransfertStatus", true);
                ProjetCorbaDNS.TransfertIDHelper.write ($out, transfertID);
                $in = _invoke ($out);
                String $result = ProjetCorbaDNS.TransfertStatusHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return CheckTransfertStatus (transfertID        );
            } finally {
                _releaseReply ($in);
            }
  } // CheckTransfertStatus

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ProjetCorbaDNS/Banque/BanqueForPublic:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _BanqueForPublicStub
