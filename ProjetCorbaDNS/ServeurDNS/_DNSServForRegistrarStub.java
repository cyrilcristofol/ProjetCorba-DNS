package ProjetCorbaDNS.ServeurDNS;


/**
* ProjetCorbaDNS/ServeurDNS/_DNSServForRegistrarStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from c:/Users/Manavai/workspace/ProjetCorba-DNS/GestionNomsDomaine.idl
* vendredi 16 dÈcembre 2016 18 h 25 CET
*/


//
public class _DNSServForRegistrarStub extends org.omg.CORBA.portable.ObjectImpl implements ProjetCorbaDNS.ServeurDNS.DNSServForRegistrar
{


  // v√©rifier l'√©tat d'un nom de domaine (libre ou non)
  public boolean IsDomainNameFree (String DomainName)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("IsDomainNameFree", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainName);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return IsDomainNameFree (DomainName        );
            } finally {
                _releaseReply ($in);
            }
  } // IsDomainNameFree


  // Ajout et supression de nom de domaine
  public boolean AddDomainName (ProjetCorbaDNS.DomainNameInformations DomainNameInformations)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("AddDomainName", true);
                ProjetCorbaDNS.DomainNameInformationsHelper.write ($out, DomainNameInformations);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return AddDomainName (DomainNameInformations        );
            } finally {
                _releaseReply ($in);
            }
  } // AddDomainName

  public boolean DelDomainName (ProjetCorbaDNS.DomainNameInformations DomainNameInformations)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("DelDomainName", true);
                ProjetCorbaDNS.DomainNameInformationsHelper.write ($out, DomainNameInformations);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return DelDomainName (DomainNameInformations        );
            } finally {
                _releaseReply ($in);
            }
  } // DelDomainName


  // V√©rification de la date d'expiration
  public String CheckDomainExpiryDate (String DomainNameToRenew)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("CheckDomainExpiryDate", true);
                ProjetCorbaDNS.DomainNameHelper.write ($out, DomainNameToRenew);
                $in = _invoke ($out);
                String $result = ProjetCorbaDNS.DateHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return CheckDomainExpiryDate (DomainNameToRenew        );
            } finally {
                _releaseReply ($in);
            }
  } // CheckDomainExpiryDate


  // Renouvellement d'un nom de domaine
  public boolean ExtendDomainNameRent (ProjetCorbaDNS.DomainNameInformations DomainNameInformations, int NumberOfYears)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ExtendDomainNameRent", true);
                ProjetCorbaDNS.DomainNameInformationsHelper.write ($out, DomainNameInformations);
                $out.write_long (NumberOfYears);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ExtendDomainNameRent (DomainNameInformations, NumberOfYears        );
            } finally {
                _releaseReply ($in);
            }
  } // ExtendDomainNameRent


  // Changement de propri√©taire d'un nom de domaine
  public boolean ApplyOwnerChangement (ProjetCorbaDNS.UserInformations NewOwner, ProjetCorbaDNS.UserInformations OldOwner)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("ApplyOwnerChangement", true);
                ProjetCorbaDNS.UserInformationsHelper.write ($out, NewOwner);
                ProjetCorbaDNS.UserInformationsHelper.write ($out, OldOwner);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return ApplyOwnerChangement (NewOwner, OldOwner        );
            } finally {
                _releaseReply ($in);
            }
  } // ApplyOwnerChangement

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ProjetCorbaDNS/ServeurDNS/DNSServForRegistrar:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _DNSServForRegistrarStub
